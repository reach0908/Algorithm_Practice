알고리즘 복잡도 표현 방법

1. 알고리즘 복잡도 계산이 필요한 이유

하나의 문제를 푸는 알고리즘은 다양할 수 있음

정수의 절대값 구하기

방법 1 : 정수값을 제곱한 값에 다시 루트를 씌우기
방법 2 : 정수가 음수인지 확인해서, 음수일 때만, -1을 곱하기

- 다양한 알고리즘 중 어느 알고리즘이 더 좋은지를 분석하기 위해서, 복잡도를 정의하고 계산함

2. 알고리즘 복잡도 계산 항목
	1. 시간 복잡도 : 알고리즘 실행 속도
	2. 공간 복잡도 : 알고리즘이 사용하는 메모리 사이즈 - 얼마나 많은 변수, 큰 배열사이즈 등
	- 가장 중요한 시간 복잡도를 꼭 이해하고 계산할 수 있어야 함.

알고리즘 시간 복잡도의 주요 요소
	- 반목문이 지배한다.
	- 입력의 크기가 커지면 커질수록 반복문이 알고리즘 수행시간을 지배함

알고리즘 성능 표기법

빅오 표기법 
- 알고리즘 최악의 실행시간을 표기
- 가장 많이 일반적으로 사용
- 아무리 최악의 상황이라도, 이정도의 성능은 보장한다는 의미이기 때문

오메가 표기법
- 오메가 표기법은 알고리즘 최상의 실행시간을 표기

세타 표기법
- 세타 표기법은 알고리즘 평균 실행시간을 표기

	- 시간 복잡도 계산은 반복문이 핵심요소임을 인지하고, 계산 표기는 최상, 평균, 최악 중 최악의 시간인 빅오 표기법을 중심으로 익히면 됨.

대문자 O 표기법
O 입력
- 입력 N에 따라 결정되는 시간 복잡도 함수
- 입력 N의 크기에 따라 기하급수적으로 시간 복잡도가 늘어날 수 있음

O(1) < O(logn) < O(n) < O(nlogn) < O(n^2) < O(2^n) < O(n!)
참고 : log n 의 베이스는 2- log2n
단순하게 입력 n에 따라, 몇번 실행이 되는지를 계산하면 됩니다.
	표현식에 가장 큰 영향을 미치는 n의 단위로 표기합니다.
	
	



