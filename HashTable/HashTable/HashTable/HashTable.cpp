// HashTable.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>
#include "LinkedList.h"
#include "HashTable.h"

using namespace std;

int main()
{
    //해쉬 구조
    // 해쉬테이블 키에 데이터를 저장하는 데이터 구조
    // 키를 통해 바로 데이터를 받아올 수 있으므로 속도가 획기적으로 빨라짐

    //검색에서 배열보다 해쉬테이블보다 좋은 이유
    //키를 이용한 특별한 해쉬함수, 
    //보통 배열로 미리 해쉬테이블 사이즈만큼 생성후에 사용 공간과 탐색시간을 맞바꾸는 기법
    //단 파이썬에서는 해쉬를 별도 구현할 이유가 없음 - 딕셔너리 타입을 사용하면 됨
    

    // 알아둘 용어
    // 해쉬 : 임의 값(방대한 데이터)을 고정길이로 변환하는 것
    // 해쉬 테이블 : 키 값의 연산에 의해 직접 접근이 가능한 데이터 구조
    // 해싱 함수 : 키에 대해 산술연산을 이용해 데이터 위치를 찾을 수 있는 함수
    // 해쉬 값 또는 해쉬 주소 : 키를 해싱함수로 연산해서 해쉬값을 알아내고 이를 기반으로 해쉬 테이블에서 해당키에 대한 데이터위치를 일관성있게 찾을 수 있음
    // 슬롯 : 한 개의 데이터를 저장할 수 있는 공간
    // 저장할 데이터에 대해 키를 추출할 수 있는 별도 함수도 존재할 수 있음.

    //배열에 해당 공간에 해당하는 데이터 키 값이 연결되어 있다. 
    
    List l;
    for (int i = 0; i < 10; i++)
    {
        l.insert(i);
    }
    //해쉬 함수 만들기 - 디비전 방법 나누기를 통한 나머지값을 사용하는 기법

    //해쉬 테이블에 값 저장 예
    // 데이타밸류와 같이 데이타와 밸류를 넣으면 해당 데이터에 대한 키를 찾아서
    //해당키에 대응하는 해쉬주소에 밸류를 저장하는 예


    //장점
    //데이터 저장 읽기속도가빠르다. 검색속도가 빠르다 해쉬는 키에 대한 데이터가 있는지 확인이 쉬움
    //단점
    //일반적으로 저장공간이 좀 더 많이 필요하다. 여러키에 해당하는 주소가 동일할 경우 충돌을 해결하기 위한 별도 자료구조가 필요함
    //주요 용도
    //검색이 많이 필요한 경우, 저장 삭제 읽기가 빈번한 경우 캐쉬 구현시 중복확인이 쉽기떄문


    //충돌해결 알고리즘
    //해쉬 테이블의 가장 큰 문제는 충돌이다. 이문제를 해쉬충돌이라고도 부른다.
    // chaining기법
    //개방 해슁 또는 오픈 해슁 기법 중 하나. : 해쉬테이블 저장공간 외의 공간을 활용하는 기법
    //충돌이 일어나면, 링크드 리스트 라는 자료구조를 사용해서, 링크드 리스트로 데이터를 추가로 뒤에 연결시켜서 저장하는 기법
    //Linear Probing 기법
    //
}

